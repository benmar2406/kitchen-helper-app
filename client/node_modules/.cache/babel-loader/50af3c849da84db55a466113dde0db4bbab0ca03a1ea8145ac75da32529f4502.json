{"ast":null,"code":"var _jsxFileName = \"/Users/bema/Documents/Codecademy/rezepte/kitchen-helper/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport RecipeCardsContainer from './components/displayRecipes/RecipeCardsContainer/RecipeCardsContainer';\nimport FormContainer from './components/ingredientsBasedStream/FormContainer/FormContainer';\nimport SubmitButton from './components/SubmitButton/SubmitButton';\nimport BackToMenuButton from './components/BackToSettingsButton/BackToSettingsButton';\nimport SelectedRecipeDetails from './components/displayRecipes/SelectedRecipeDetails/SelectedRecipeDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [dietChoice, setDietChoice] = useState('');\n  const [ingredients, setIngredients] = useState([]);\n  const [intoleranceExisting, setIntoleranceExisting] = useState(null); //used to display the intolerances checkboxes in case user clicks yes when asked\n  const [selectedIntolerances, setSelectedIntolerances] = useState([]); //the array for the actual selected intolerances\n  const [readyForSubmission, setReadyForSubmission] = useState(false);\n  const submitButtonRef = useRef(null);\n  const [recipes, setRecipes] = useState([]);\n  const [displayRecipes, setDisplayRecipes] = useState(false);\n  const [activeButton, setActiveButton] = useState('');\n\n  // Handle input change in IngredientForm\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInputValue(value);\n    handleAutocomplete(value);\n  };\n\n  // Get autocomplete suggestions for ingredients via spooancular API\n  async function handleAutocomplete(query) {\n    if (query.length > 1) {\n      try {\n        const response = await fetch(`/api/autocomplete?query=${query}`);\n        const suggestions = await response.json();\n        setSuggestions(suggestions);\n      } catch (error) {\n        console.error('Error fetching autocomplete suggestions:', error);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  }\n\n  // Add clicked suggestion to ingredients\n  const handleSuggestionClick = suggestion => {\n    setIngredients(prevIngredients => {\n      const updatedIngredients = [...prevIngredients, suggestion];\n      return updatedIngredients;\n    });\n    setInputValue('');\n    setSuggestions([]);\n  };\n\n  // Delete ingredient from selected ingredients\n  const handleDeleteIngredient = ingredientToDelete => {\n    setIngredients(prevIngredients => {\n      const updatedIngredients = prevIngredients.filter(ingredient => ingredient !== ingredientToDelete);\n      return updatedIngredients;\n    });\n  };\n\n  // Passed to DietForm to update dietChoice\n  const handleDietChoiceChange = preference => {\n    setDietChoice(preference);\n  };\n  const handleDietButtonClick = preference => {\n    setActiveButton(preference);\n    handleDietChoiceChange(preference);\n  };\n\n  //pass to Inolerances form to update intolerances choice\n  const handleIntolerancesDecision = choice => {\n    setIntoleranceExisting(choice);\n    choice === false && setSelectedIntolerances([]);\n  };\n\n  //updates intolerances and displays submit button\n  const handleSelectedIntolerancesChange = intolerance => {\n    setSelectedIntolerances(prevSelectedIntolerances => {\n      if (prevSelectedIntolerances.includes(intolerance)) {\n        const updatedSelectedIntolerances = prevSelectedIntolerances.filter(item => item !== intolerance);\n        return updatedSelectedIntolerances;\n      } else {\n        const updatedSelectedIntolerances = [...prevSelectedIntolerances, intolerance];\n        return updatedSelectedIntolerances;\n      }\n    });\n  };\n\n  //displays the button that triggers api call only when all requirements are met\n  useEffect(() => {\n    const isReadyForSubmission = dietChoice !== '' && (intoleranceExisting === true && selectedIntolerances.length > 0 || intoleranceExisting === false) && ingredients.length > 0;\n    setReadyForSubmission(isReadyForSubmission);\n  }, [dietChoice, intoleranceExisting, selectedIntolerances, ingredients]);\n  useEffect(() => {\n    if (readyForSubmission && submitButtonRef.current) {\n      submitButtonRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [readyForSubmission]);\n\n  // Get recipes based on choices\n  async function handlerecipesRequest() {\n    const ingredientsParam = ingredients.join(',');\n    const intolerancesParam = selectedIntolerances.join(',');\n    const dietParam = dietChoice;\n    const url = `/api/recipes?ingredients=${ingredientsParam}&intolerances=${intolerancesParam}&diet=${dietParam}`;\n    console.log('url:', url);\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.totalResults > 0) {\n        const updatedRecipes = data.results;\n        setRecipes(updatedRecipes);\n        console.log('Retrieved recipes:', updatedRecipes);\n      } else {\n        console.log('No recipes found.');\n      }\n    } catch (error) {\n      console.error('Error fetching recipes:', error);\n    }\n  }\n\n  //Get recipe with provisioned id.\n\n  useEffect(() => {\n    if (recipes.length > 0) {\n      setDisplayRecipes(true); //used as condition to render the recipes container\n      setReadyForSubmission(false);\n    }\n  }, [recipes]);\n\n  //render the menu/settings again\n  const handleBackToSettingClick = () => {\n    setDisplayRecipes(false);\n    setReadyForSubmission(true);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), !displayRecipes && /*#__PURE__*/_jsxDEV(FormContainer, {\n              inputValue: inputValue,\n              suggestions: suggestions,\n              ingredients: ingredients,\n              onInputChange: handleInputChange,\n              onIngredientAdd: handleSuggestionClick,\n              onIngredientDelete: handleDeleteIngredient,\n              dietChoice: dietChoice,\n              onDietButtonClick: handleDietButtonClick,\n              activeButton: activeButton,\n              onIntolerancesDecisionChange: handleIntolerancesDecision,\n              intoleranceExisting: intoleranceExisting,\n              selectedIntolerances: selectedIntolerances,\n              onSelectedIntolerancesChange: handleSelectedIntolerancesChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this), readyForSubmission && /*#__PURE__*/_jsxDEV(SubmitButton, {\n              ref: submitButtonRef,\n              onSubmitButtonClick: handlerecipesRequest\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 40\n            }, this), displayRecipes && /*#__PURE__*/_jsxDEV(BackToMenuButton, {\n              onBackToSettingsClick: handleBackToSettingClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 36\n            }, this), displayRecipes && /*#__PURE__*/_jsxDEV(RecipeCardsContainer, {\n              recipes: recipes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 36\n            }, this), displayRecipes && /*#__PURE__*/_jsxDEV(BackToMenuButton, {\n              onBackToSettingsClick: handleBackToSettingClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/recipe/:id\",\n          element: /*#__PURE__*/_jsxDEV(SelectedRecipeDetails, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nvbaOEerC9DWe3x/PMy4axvyXhw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BrowserRouter","Router","Route","Routes","Header","RecipeCardsContainer","FormContainer","SubmitButton","BackToMenuButton","SelectedRecipeDetails","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","suggestions","setSuggestions","dietChoice","setDietChoice","ingredients","setIngredients","intoleranceExisting","setIntoleranceExisting","selectedIntolerances","setSelectedIntolerances","readyForSubmission","setReadyForSubmission","submitButtonRef","recipes","setRecipes","displayRecipes","setDisplayRecipes","activeButton","setActiveButton","handleInputChange","e","value","target","handleAutocomplete","query","length","response","fetch","json","error","console","handleSuggestionClick","suggestion","prevIngredients","updatedIngredients","handleDeleteIngredient","ingredientToDelete","filter","ingredient","handleDietChoiceChange","preference","handleDietButtonClick","handleIntolerancesDecision","choice","handleSelectedIntolerancesChange","intolerance","prevSelectedIntolerances","includes","updatedSelectedIntolerances","item","isReadyForSubmission","current","scrollIntoView","behavior","handlerecipesRequest","ingredientsParam","join","intolerancesParam","dietParam","url","log","ok","Error","status","data","totalResults","updatedRecipes","results","handleBackToSettingClick","children","className","path","element","fileName","_jsxFileName","lineNumber","columnNumber","onInputChange","onIngredientAdd","onIngredientDelete","onDietButtonClick","onIntolerancesDecisionChange","onSelectedIntolerancesChange","ref","onSubmitButtonClick","onBackToSettingsClick","_c","$RefreshReg$"],"sources":["/Users/bema/Documents/Codecademy/rezepte/kitchen-helper/client/src/App.js"],"sourcesContent":["  import React, { useState, useEffect, useRef } from 'react';\n  import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\n  import './App.css';\n  import Header from './components/Header/Header'; \n  import RecipeCardsContainer from './components/displayRecipes/RecipeCardsContainer/RecipeCardsContainer';\n  import FormContainer from './components/ingredientsBasedStream/FormContainer/FormContainer';\n  import SubmitButton from './components/SubmitButton/SubmitButton';\n  import BackToMenuButton from './components/BackToSettingsButton/BackToSettingsButton';\n  import SelectedRecipeDetails from './components/displayRecipes/SelectedRecipeDetails/SelectedRecipeDetails';\n\n\n  function App() {\n\n    const [inputValue, setInputValue] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n    const [dietChoice, setDietChoice] = useState('');\n    const [ingredients, setIngredients] = useState([]);\n    const [intoleranceExisting, setIntoleranceExisting] = useState(null); //used to display the intolerances checkboxes in case user clicks yes when asked\n    const [selectedIntolerances, setSelectedIntolerances] = useState([]); //the array for the actual selected intolerances\n    const [readyForSubmission, setReadyForSubmission] = useState(false)\n    const submitButtonRef = useRef(null);\n    const [recipes, setRecipes] = useState([]);\n    const [displayRecipes, setDisplayRecipes] = useState(false);\n    const [activeButton, setActiveButton] = useState('');\n\n\n\n    // Handle input change in IngredientForm\n    const handleInputChange = (e) => {\n        const value = e.target.value;\n        setInputValue(value);\n        handleAutocomplete(value);  \n    };\n\n    // Get autocomplete suggestions for ingredients via spooancular API\n    async function handleAutocomplete(query) {\n        if (query.length > 1) {\n            try {\n                const response = await fetch(`/api/autocomplete?query=${query}`);\n                const suggestions = await response.json();\n                setSuggestions(suggestions);\n            } catch (error) {\n                console.error('Error fetching autocomplete suggestions:', error);\n            }\n        } else {\n            setSuggestions([]);\n        }\n    }\n\n    // Add clicked suggestion to ingredients\n    const handleSuggestionClick = (suggestion) => {\n    setIngredients((prevIngredients) => {\n        const updatedIngredients = [...prevIngredients, suggestion];\n        return updatedIngredients;\n    });\n    setInputValue('');\n    setSuggestions([]);\n    };\n\n    // Delete ingredient from selected ingredients\n    const handleDeleteIngredient = (ingredientToDelete) => {\n        setIngredients((prevIngredients) => {\n            const updatedIngredients = prevIngredients.filter(ingredient => ingredient !== ingredientToDelete);\n            return updatedIngredients;\n        });\n    };\n\n    // Passed to DietForm to update dietChoice\n    const handleDietChoiceChange = (preference) => {\n        setDietChoice(preference);\n    };\n\n    const handleDietButtonClick = (preference) => {\n      setActiveButton(preference);\n      handleDietChoiceChange(preference);\n    };\n\n    //pass to Inolerances form to update intolerances choice\n    const handleIntolerancesDecision = (choice) => {\n        setIntoleranceExisting(choice);\n        choice === false && setSelectedIntolerances([]);\n      };  \n    \n    \n    //updates intolerances and displays submit button\n    const handleSelectedIntolerancesChange = (intolerance) => {\n      setSelectedIntolerances((prevSelectedIntolerances) => {\n        if (prevSelectedIntolerances.includes(intolerance)) {\n          const updatedSelectedIntolerances = prevSelectedIntolerances.filter(item => item !== intolerance);\n          return updatedSelectedIntolerances\n        } else {\n          const updatedSelectedIntolerances = [...prevSelectedIntolerances, intolerance];\n          return updatedSelectedIntolerances\n        }\n      });\n    };\n    \n    //displays the button that triggers api call only when all requirements are met\n    useEffect(() => {\n      const isReadyForSubmission = dietChoice !== '' && \n        ((intoleranceExisting === true && selectedIntolerances.length > 0) || \n        (intoleranceExisting === false)) && \n        ingredients.length > 0;\n      setReadyForSubmission(isReadyForSubmission);\n    }, [dietChoice, intoleranceExisting, selectedIntolerances, ingredients]);\n\n    useEffect(() => {\n      if (readyForSubmission && submitButtonRef.current) {\n          submitButtonRef.current.scrollIntoView({ behavior: 'smooth' });\n      }\n  }, [readyForSubmission]); \n\n\n  // Get recipes based on choices\n  async function handlerecipesRequest() {\n    const ingredientsParam = ingredients.join(',');\n    const intolerancesParam = selectedIntolerances.join(',');\n    const dietParam = dietChoice;\n\n    const url = `/api/recipes?ingredients=${ingredientsParam}&intolerances=${intolerancesParam}&diet=${dietParam}`;\n    console.log('url:', url);\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.totalResults > 0) {\n          const updatedRecipes = data.results;\n          setRecipes(updatedRecipes);\n          console.log('Retrieved recipes:', updatedRecipes);\n\n        } else {\n            console.log('No recipes found.');\n        }\n    } catch (error) {\n        console.error('Error fetching recipes:', error);\n    }\n  }\n\n  //Get recipe with provisioned id.\n\n  useEffect(() => {\n  if(recipes.length > 0) {\n    setDisplayRecipes(true); //used as condition to render the recipes container\n    setReadyForSubmission(false);\n  }}, [recipes])\n\n  //render the menu/settings again\n  const handleBackToSettingClick = () => {\n    setDisplayRecipes(false);\n    setReadyForSubmission(true);\n  }\n\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n       \n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <div>\n                <Header />\n                {!displayRecipes && \n                <FormContainer \n                  inputValue={inputValue}\n                  suggestions={suggestions}\n                  ingredients={ingredients}\n                  onInputChange={handleInputChange}\n                  onIngredientAdd={handleSuggestionClick} \n                  onIngredientDelete={handleDeleteIngredient} \n                  dietChoice={dietChoice}\n                  onDietButtonClick = {handleDietButtonClick}\n                  activeButton = {activeButton}\n                  onIntolerancesDecisionChange={handleIntolerancesDecision}\n                  intoleranceExisting={intoleranceExisting}\n                  selectedIntolerances={selectedIntolerances}\n                  onSelectedIntolerancesChange = {handleSelectedIntolerancesChange}\n                />}\n                {readyForSubmission && <SubmitButton ref={submitButtonRef} onSubmitButtonClick={handlerecipesRequest} />}\n                {displayRecipes && <BackToMenuButton onBackToSettingsClick = {handleBackToSettingClick} />}\n                {displayRecipes && <RecipeCardsContainer recipes={recipes}/>}\n                {displayRecipes && <BackToMenuButton onBackToSettingsClick = {handleBackToSettingClick} />}\n              </div>\n            } \n          />\n\n          <Route \n            path=\"/recipe/:id\" \n            element={\n              <SelectedRecipeDetails />\n            } \n          />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}